from typing import Dict, List, Optional
import logging

logger = logging.getLogger('proact.database.entity')

class DatabaseEntity:
    '''Abstract superclass for representing db entities/records.

    See `_attr_keys` for attributes common to all subclasses.
    '''

    @classmethod
    def _summary_keys(cls) -> int:
        '''Number of attribute keys from the first in `_attr_keys()` to be included in short representation of this instance.

        Default is 1; only the first attribute is included.
        '''

        return 1
    # end def

    @classmethod
    def _attr_keys(cls) -> List[str]:
        '''Attribute keys, as populated in db table. Summary keys (important attributes) are first.

        Includes attributes expected to be present in any db entity.
        '''

        return [
            'id'
        ]
    # end def

    @classmethod
    def table_name(cls) -> str:
        '''DB table/collection name. Default is same as class name.
        '''

        return cls.__name__
    # end def

    @classmethod
    def from_dict(cls, entity:Dict) -> 'DatabaseEntity':
        '''Parse entity data as an instance.

        Default implementation just passes given dictionary as arguments to the constructor.
        '''

        logger.debug(f'create {cls.__name__} from {entity}')

        return cls(**entity)
    # end def

    def __init__(self, **kwargs):
        '''Entity constructor to handle common attributes.
        '''

        self.id: Optional[str] = kwargs.get('id')
        '''Unique entity id, generated by firebase.
        
        If not defined, assume this is in context of creating a new entity, for which the id is not
        yet generated.
        '''
    # end def

    def to_dict(self) -> Dict:
        '''Convert to dictionary for serialization.

        Default implementation assumes all attributes are already scalar and are present as a member of the same name in the 
        instance.
        '''

        d = {
            k: getattr(self, k, None)
            for k in self._attr_keys()
        }

        return d
    # end to_dict

    def __str__(self) -> str:
        '''Human readable representation of this entity.
        '''

        return f'{type(self).__name__}[{' '.join([
            f'{k}={getattr(self, k)}'
            for k in self._attr_keys()[:self._summary_keys()]
        ])}]'
    # end def
# end class